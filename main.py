import json
from os import environ as env
from urllib.parse import quote_plus, urlencode

from authlib.integrations.flask_client import OAuth
from dotenv import find_dotenv, load_dotenv
from flask import Flask, redirect, render_template, session, url_for, jsonify

from google.cloud import datastore
import constants
import team

ENV_FILE = find_dotenv()
if ENV_FILE:
    load_dotenv(ENV_FILE)

app = Flask(__name__)
app.register_blueprint(team.bp)
app.secret_key = env.get("APP_SECRET_KEY")

client = datastore.Client()

oauth = OAuth(app)

oauth.register(
    "auth0",
    client_id=env.get("AUTH0_CLIENT_ID"),
    client_secret=env.get("AUTH0_CLIENT_SECRET"),
    client_kwargs={
        "scope": "openid profile email",
    },
    server_metadata_url=f'https://{env.get("AUTH0_DOMAIN")}/.well-known/openid-configuration'
)

@app.route("/login")
def login():
    return oauth.auth0.authorize_redirect(
        redirect_uri=url_for("callback", _external=True)
    )

@app.route("/callback", methods=["GET", "POST"])
def callback():
    token = oauth.auth0.authorize_access_token()
    session["user"] = token
    # Check if user exists in datastore
    sub = token["userinfo"]["sub"]
    user_id = get_user_id_by_sub(sub)
    if not user_id:
        user_id = add_user_to_db(sub)
    session["user"]["user_id"] = user_id
    return redirect("/")

@app.route("/logout")
def logout():
    session.clear()
    return redirect(
        "https://" + env.get("AUTH0_DOMAIN")
        + "/v2/logout?"
        + urlencode(
            {
                "returnTo": url_for("home", _external=True),
                "client_id": env.get("AUTH0_CLIENT_ID"),
            },
            quote_via=quote_plus,
        )
    )

@app.route("/")
def home():
    return render_template("home.html", session=session.get('user'), pretty=json.dumps(session.get('user'), indent=4))

# ================================ USER DATASTORE FUNCTIONS ================================
def get_user_id_by_sub(sub):
    '''
    Return the user_id if user with this sub exists in database
    Otherwise, return False
    '''
    query = client.query(kind=constants.users)
    query.add_filter("sub", "=", sub)
    results = list(query.fetch())
    if len(results) != 1:
        return False
    return results[0].key.id

def add_user_to_db(sub):
    '''
    Adds a user to Datastore with sub property set to sub
    Returns the unique user_id generated by Datastore
    '''
    user = datastore.Entity(client.key(constants.users))
    user.update({ "sub": sub })
    client.put(user)
    return user.key.id

if __name__ == "__main__":
    app.run(host="127.0.0.1", port=env.get("PORT", 3000))
